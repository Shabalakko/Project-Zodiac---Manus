using UnityEngine;
using UnityEngine.InputSystem;

// This file is typically auto-generated by Unity when you create an Input Action Asset.
// This is a placeholder to allow PlayerController.cs to compile.
// You will need to create an actual Input Action Asset in Unity and generate the C# class.

public class PlayerInputActions : IInputActionCollection2, System.IDisposable
{
    public InputActionAsset asset { get; }
    public PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{ \"name\": \"PlayerInputActions\", \"maps\": [ { \"name\": \"Player\", \"id\": \"12345678-abcd-efgh-ijkl-mnopqrstuvwx\", \"actions\": [ { \"name\": \"Move\", \"type\": \"Value\", \"id\": \"1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p\", \"expectedControlType\": \"Vector2\", \"processors\": \"\", \"interactions\": \"\", \"initialStateCheck\": true }, { \"name\": \"Jump\", \"type\": \"Button\", \"id\": \"2b3c4d5e-6f7g-8h9i-0j1k-2l3m4n5o6p7q\", \"expectedControlType\": \"Button\", \"processors\": \"\", \"interactions\": \"Press\", \"initialStateCheck\": false }, { \"name\": \"Attack\", \"type\": \"Button\", \"id\": \"3c4d5e6f-7g8h-9i0j-1k2l-3m4n5o6p7q8r\", \"expectedControlType\": \"Button\", \"processors\": \"\", \"interactions\": \"Press\", \"initialStateCheck\": false }, { \"name\": \"DodgeBlock\", \"type\": \"Button\", \"id\": \"4d5e6f7g-8h9i-0j1k-2l3m-4n5o6p7q8r9s\", \"expectedControlType\": \"Button\", \"processors\": \"\", \"interactions\": \"Press\", \"initialStateCheck\": false }, { \"name\": \"Interact\", \"type\": \"Button\", \"id\": \"5e6f7g8h-9i0j-1k2l-3m4n-5o6p7q8r9s0t\", \"expectedControlType\": \"Button\", \"processors\": \"\", \"interactions\": \"Press\", \"initialStateCheck\": false }, { \"name\": \"LockOn\", \"type\": \"Button\", \"id\": \"6f7g8h9i-0j1k-2l3m-4n5o-6p7q8r9s0t1u\", \"expectedControlType\": \"Button\", \"processors\": \"\", \"interactions\": \"Press\", \"initialStateCheck\": false }, { \"name\": \"MenuPause\", \"type\": \"Button\", \"id\": \"7g8h9i0j-1k2l-3m4n-5o6p-7q8r9s0t1u2v\", \"expectedControlType\": \"Button\", \"processors\": \"\", \"interactions\": \"Press\", \"initialStateCheck\": false }, { \"name\": \"ChangeTarget\", \"type\": \"Button\", \"id\": \"8h9i0j1k-2l3m-4n5o-6p7q-8r9s0t1u2v3w\", \"expectedControlType\": \"Button\", \"processors\": \"\", \"interactions\": \"Press\", \"initialStateCheck\": false } ], \"bindings\": [ { \"name\": \"WASD\", \"id\": \"9i0j1k2l-3m4n-5o6p-7q8r-9s0t1u2v3w4x\", \"path\": \"2DVector\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Move\", \"isComposite\": true, \"isPartOfComposite\": false }, { \"name\": \"up\", \"id\": \"0j1k2l3m-4n5o-6p7q-8r9s-0t1u2v3w4x5y\", \"path\": \"<Keyboard>/w\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Move\", \"isComposite\": false, \"isPartOfComposite\": true }, { \"name\": \"down\", \"id\": \"1k2l3m4n-5o6p-7q8r-9s0t-1u2v3w4x5y6z\", \"path\": \"<Keyboard>/s\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Move\", \"isComposite\": false, \"isPartOfComposite\": true }, { \"name\": \"left\", \"id\": \"2l3m4n5o-6p7q-8r9s-0t1u-2v3w4x5y6z7a\", \"path\": \"<Keyboard>/a\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Move\", \"isComposite\": false, \"isPartOfComposite\": true }, { \"name\": \"right\", \"id\": \"3m4n5o6p-7q8r-9s0t-1u2v-3w4x5y6z7a8b\", \"path\": \"<Keyboard>/d\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Move\", \"isComposite\": false, \"isPartOfComposite\": true }, { \"name\": \"Gamepad\", \"id\": \"4n5o6p7q-8r9s-0t1u-2v3w-4x5y6z7a8b9c\", \"path\": \"<Gamepad>/leftStick\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Move\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"5o6p7q8r-9s0t-1u2v-3w4x-5y6z7a8b9c0d\", \"path\": \"<Keyboard>/space\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Jump\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"6p7q8r9s-0t1u-2v3w-4x5y-6z7a8b9c0d1e\", \"path\": \"<Gamepad>/buttonSouth\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Jump\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"7q8r9s0t-1u2v-3w4x-5y6z-7a8b9c0d1e2f\", \"path\": \"<Mouse>/leftButton\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Attack\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"8r9s0t1u-2v3w-4x5y-6z7a-8b9c0d1e2f3g\", \"path\": \"<Gamepad>/buttonWest\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Attack\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"9s0t1u2v-3w4x-5y6z-7a8b-9c0d1e2f3g4h\", \"path\": \"<Mouse>/rightButton\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"DodgeBlock\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"0t1u2v3w-4x5y-6z7a-8b9c-0d1e2f3g4h5i\", \"path\": \"<Gamepad>/buttonEast\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"DodgeBlock\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"1u2v3w4x-5y6z-7a8b-9c0d-1e2f3g4h5i6j\", \"path\": \"<Keyboard>/e\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Interact\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"2v3w4x5y-6z7a-8b9c-0d1e-2f3g4h5i6j7k\", \"path\": \"<Gamepad>/buttonNorth\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"Interact\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"3w4x5y6z-7a8b-9c0d-1e2f-3g4h5i6j7k8l\", \"path\": \"<Keyboard>/q\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"LockOn\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"4x5y6z7a-8b9c-0d1e-2f3g-4h5i6j7k8l9m\", \"path\": \"<Gamepad>/rightShoulder\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"LockOn\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"5y6z7a8b-9c0d-1e2f-3g4h-5i6j7k8l9m0n\", \"path\": \"<Keyboard>/enter\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"MenuPause\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"6z7a8b9c-0d1e-2f3g-4h5i-6j7k8l9m0n1o\", \"path\": \"<Gamepad>/start\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"MenuPause\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"7a8b9c0d-1e2f-3g4h-5i6j-7k8l9m0n1o2p\", \"path\": \"<Keyboard>/tab\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"ChangeTarget\", \"isComposite\": false, \"isPartOfComposite\": false }, { \"name\": \"\", \"id\": \"8b9c0d1e-2f3g-4h5i-6j7k-8l9m0n1o2p3q\", \"path\": \"<Gamepad>/rightTrigger\", \"interactions\": \"\", \"processors\": \"\", \"groups\": \"\", \"action\": \"ChangeTarget\", \"isComposite\": false, \"isPartOfComposite\": false } ] } ], \"controlSchemes\": [ ] })");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_DodgeBlock;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_LockOn;
    private readonly InputAction m_Player_MenuPause;
    private readonly InputAction m_Player_ChangeTarget;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @DodgeBlock => m_Wrapper.m_Player_DodgeBlock;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @LockOn => m_Wrapper.m_Player_LockOn;
        public InputAction @MenuPause => m_Wrapper.m_Player_MenuPause;
        public InputAction @ChangeTarget => m_Wrapper.m_Player_ChangeTarget;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @DodgeBlock.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDodgeBlock;
                @DodgeBlock.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDodgeBlock;
                @DodgeBlock.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDodgeBlock;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @LockOn.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLockOn;
                @LockOn.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLockOn;
                @LockOn.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLockOn;
                @MenuPause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMenuPause;
                @MenuPause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMenuPause;
                @MenuPause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMenuPause;
                @ChangeTarget.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeTarget;
                @ChangeTarget.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeTarget;
                @ChangeTarget.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeTarget;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @DodgeBlock.started += instance.OnDodgeBlock;
                @DodgeBlock.performed += instance.OnDodgeBlock;
                @DodgeBlock.canceled += instance.OnDodgeBlock;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @LockOn.started += instance.OnLockOn;
                @LockOn.performed += instance.OnLockOn;
                @LockOn.canceled += instance.OnLockOn;
                @MenuPause.started += instance.OnMenuPause;
                @MenuPause.performed += instance.OnMenuPause;
                @MenuPause.canceled += instance.OnMenuPause;
                @ChangeTarget.started += instance.OnChangeTarget;
                @ChangeTarget.performed += instance.OnChangeTarget;
                @ChangeTarget.canceled += instance.OnChangeTarget;
            }
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDodgeBlock(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnMenuPause(InputAction.CallbackContext context);
        void OnChangeTarget(InputAction.CallbackContext context);
    }
}


